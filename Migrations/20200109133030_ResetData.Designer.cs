// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using job_application_project.EntityFramework;

namespace jobapplicationproject.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200109133030_ResetData")]
    partial class ResetData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("job_application_project.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new { Id = 1, Name = "Auchan" },
                        new { Id = 2, Name = "Tesco" },
                        new { Id = 3, Name = "Biedronka" },
                        new { Id = 4, Name = "Lewiatan" },
                        new { Id = 5, Name = "Żabka" },
                        new { Id = 6, Name = "Carrefour" }
                    );
                });

            modelBuilder.Entity("job_application_project.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ContactAgreement");

                    b.Property<string>("CvUrl")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("JobOfferId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new { Id = 1, ContactAgreement = true, CvUrl = "https://www.cv.com/goreckia/", EmailAddress = "goreckia@gmail.com", FirstName = "Arkadiusz", JobOfferId = 1, LastName = "Górecki", PhoneNumber = "731327437" },
                        new { Id = 2, ContactAgreement = false, CvUrl = "https://www.cv.com/cesarskim/", EmailAddress = "cesarskim@gmail.com", FirstName = "Maciej", JobOfferId = 1, LastName = "Cesarski", PhoneNumber = "123123123" },
                        new { Id = 3, ContactAgreement = true, CvUrl = "https://www.cv.com/johansons/", EmailAddress = "johansons@gmail.com", FirstName = "Scarlett", JobOfferId = 1, LastName = "Johanson", PhoneNumber = "420690000" },
                        new { Id = 4, ContactAgreement = true, CvUrl = "https://www.cv.com/sparrowj/", EmailAddress = "sparrowj@gmail.com", FirstName = "Jack", JobOfferId = 2, LastName = "Sparrow", PhoneNumber = "120690000" },
                        new { Id = 5, ContactAgreement = true, CvUrl = "https://www.cv.com/turnerw/", EmailAddress = "turnerw@gmail.com", FirstName = "Will", JobOfferId = 2, LastName = "Turner", PhoneNumber = "111333222" },
                        new { Id = 6, ContactAgreement = true, CvUrl = "https://www.cv.com/starkt/", EmailAddress = "starkt@gmail.com", FirstName = "Tony", JobOfferId = 3, LastName = "Stark", PhoneNumber = "12346789" },
                        new { Id = 7, ContactAgreement = false, CvUrl = "https://www.cv.com/bagginsf/", EmailAddress = "bagginsf@gmail.com", FirstName = "Frodo", JobOfferId = 3, LastName = "Baggins", PhoneNumber = "789789789" },
                        new { Id = 8, ContactAgreement = true, CvUrl = "https://www.cv.com/cruiset/", EmailAddress = "cruiset@gmail.com", FirstName = "Tom", JobOfferId = 3, LastName = "Cruise", PhoneNumber = "675435098" },
                        new { Id = 9, ContactAgreement = true, CvUrl = "https://www.cv.com/rabbitj/", EmailAddress = "rabbitj@gmail.com", FirstName = "Jojo", JobOfferId = 4, LastName = "Rabbit", PhoneNumber = "888888888" },
                        new { Id = 10, ContactAgreement = false, CvUrl = "https://www.cv.com/joestarj/", EmailAddress = "joestarj@gmail.com", FirstName = "Joseph", JobOfferId = 5, LastName = "Joestar", PhoneNumber = "123890456" }
                    );
                });

            modelBuilder.Entity("job_application_project.Models.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal?>("SalaryFrom");

                    b.Property<decimal?>("SalaryTo");

                    b.Property<DateTime?>("ValidUntil")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new { Id = 1, CompanyId = 1, Created = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Nice work, I recommend", JobTitle = "Frontend", Location = "Warsaw", SalaryFrom = 3000m, SalaryTo = 5000m, ValidUntil = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, CompanyId = 1, Created = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Fruit mondays", JobTitle = "Backend", Location = "Warsaw", SalaryFrom = 4500m, SalaryTo = 6500m, ValidUntil = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, CompanyId = 1, Created = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Very dynamic team", JobTitle = "On dish", Location = "Grojec", SalaryFrom = 2200m, SalaryTo = 3200m, ValidUntil = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, CompanyId = 2, Created = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Comfortable armchair", JobTitle = "Cashier", Location = "Piaseczno", SalaryFrom = 2200m, SalaryTo = 3200m, ValidUntil = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, CompanyId = 2, Created = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Easy job", JobTitle = "Warehouseman", Location = "Piaseczno", SalaryFrom = 2200m, SalaryTo = 3200m, ValidUntil = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 6, CompanyId = 3, Created = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Driving skills required", JobTitle = "Forklift operator", Location = "Radom", SalaryFrom = 3500m, SalaryTo = 4500m, ValidUntil = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 7, CompanyId = 4, Created = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Karate and judo skills required. Gun license required", JobTitle = "Security guard", Location = "Lublin", SalaryFrom = 3000m, SalaryTo = 4000m, ValidUntil = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("job_application_project.Models.JobApplication", b =>
                {
                    b.HasOne("job_application_project.Models.JobOffer", "JobOffer")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("job_application_project.Models.JobOffer", b =>
                {
                    b.HasOne("job_application_project.Models.Company", "Company")
                        .WithMany("JobOffers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
